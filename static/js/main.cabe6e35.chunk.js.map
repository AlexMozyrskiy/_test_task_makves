{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["data","name","uv","pv","amt","uvAvg","reduce","prevResult","item","length","pvAvg","uvDisp","Math","pow","uvStandardDeviation","sqrt","pvDisp","pvStandardDeviation","uvBottomBound","round","uvTopBound","uvArr","map","uvMaxValue","max","uvMinValue","min","uvDef","uvBottomBoundPercentage","uvTopBoundPercentage","pvBottomBound","pvTopBound","pvArr","pvMaxValue","pvMinValue","pvDef","pvBottomBoundPercentage","pvTopBoundPercentage","e","Example","style","marginLeft","href","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","id","x1","y1","x2","y2","offset","stopColor","Line","type","stroke","activeDot","r","dot","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cabe6e35.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst data = [\n  {\n    name: 'Page A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: 'Page B',\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: 'Page C',\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: 'Page D',\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: 'Page E',\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: 'Page F',\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: 'Page G',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\n// ----------------------------- Средние значения ---------------------------------------\nconst uvAvg = data.reduce((prevResult, item) => {        // среднее значение uv\n  return prevResult + item.uv;\n}, 0) / data.length;\n\nconst pvAvg = data.reduce((prevResult, item) => {        // среднее значение pv\n  return prevResult + item.pv;\n}, 0) / data.length;\n// ----------------------------- / Средние значения -------------------------------------\n\n\n// ------------------ Вычислим среднеарифметическое квадратов отклонений значений uv от их средней величины (дисперсию) ----------\nconst uvDisp = data.reduce((prevResult, item) => {\n  let deviationSquares = Math.pow((item.uv - uvAvg), 2);        // квадрат отклонений каждого uv\n  return deviationSquares + prevResult;\n\n}, 0) / data.length;\n// ------------------ / Вычислим среднеарифметическое квадратов отклонений значений uv от их средней величины (дисперсию) --------\n\n\n// -------------------- Вычислим стандартное отклонение uv ---------------------------------------\nconst uvStandardDeviation = Math.sqrt(uvDisp);\n// -------------------- / Вычислим стандартное отклонение uv -------------------------------------\n\n\n// ------------------ Вычислим среднеарифметическое квадратов отклонений значений pv от их средней величины (дисперсию) ----------\nconst pvDisp = data.reduce((prevResult, item) => {\n  let deviationSquares = Math.pow((item.pv - pvAvg), 2);        // квадрат отклонений каждого pv\n  return deviationSquares + prevResult;\n\n}, 0) / data.length;\n// ------------------ / Вычислим среднеарифметическое квадратов отклонений значений pv от их средней величины (дисперсию) --------\n\n\n// -------------------- Вычислим стандартное отклонение pv ---------------------------------------\nconst pvStandardDeviation = Math.sqrt(pvDisp);\n// -------------------- / Вычислим стандартное отклонение pv -------------------------------------\n\n// --------------------------- Границы за которыми окрашиваем график для uv ----------------------------\nconst uvBottomBound = Math.round(uvAvg - uvStandardDeviation);           //  нам нужны значения в процентах, эти значения не в процентах, приведем их к процентам для использования в <linearGradient>\nconst uvTopBound = Math.round(uvAvg + uvStandardDeviation);\n\nconst uvArr = data.map( item => item.uv )               // новый массив из значений data.uv\nconst uvMaxValue = Math.max(...uvArr);                  // максимальное значение в массиве uvArr\nconst uvMinValue = Math.min(...uvArr);                  // минимальное значение в массиве uvArr\nconst uvDef = uvMaxValue - uvMinValue;\nconst uvBottomBoundPercentage = `${(100 - (uvTopBound - uvMinValue) * 100 / uvDef)}%`       // значения в процентах\nconst uvTopBoundPercentage = `${(100 - (uvBottomBound - uvMinValue) * 100 / uvDef)}%`\n// --------------------------- / Границы за которыми окрашиваем графики для uv ---------------------------\n\n\n// --------------------------- Границы за которыми окрашиваем график для pv ----------------------------\nconst pvBottomBound = Math.round(pvAvg - pvStandardDeviation);           //  нам нужны значения в процентах, эти значения не в процентах, приведем их к процентам для использования в <linearGradient>\nconst pvTopBound = Math.round(pvAvg + pvStandardDeviation);\n\nconst pvArr = data.map( item => item.pv )               // новый массив из значений data.pv\nconst pvMaxValue = Math.max(...pvArr);                  // максимальное значение в массиве pvArr\nconst pvMinValue = Math.min(...pvArr);                  // минимальное значение в массиве pvArr\nconst pvDef = pvMaxValue - pvMinValue;\nconst pvBottomBoundPercentage = `${(100 - (pvTopBound - pvMinValue) * 100 / pvDef)}%`\nconst pvTopBoundPercentage  = `${(100 - (pvBottomBound - pvMinValue) * 100 / pvDef)}%`\n// --------------------------- / Границы за которыми окрашиваем графики для pv ---------------------------\n\n\n// ---------------------- Для отображения линии uvTopBound и uvMaxValue пушим в массив data ------------------\nfor(let e of data) {\n  e.uvTopBound = uvTopBound;\n  e.uvBottomBound = uvBottomBound;\n  e.pvTopBound = pvTopBound;\n  e.pvBottomBound = pvBottomBound;\n}\n// ---------------------- / Для отображения линии uvTopBound и uvMaxValue пушим в массив data ----------------\n\nexport default class Example extends PureComponent {\n\n  render() {\n    return (\n      <>\n\n      <h2 style={{marginLeft: \"20px\"}}>Спасибо компании \"Маквес Групп\" за интересное тестовое задание=)</h2>\n      <h3 style={{marginLeft: \"20px\"}}>Задание: Модифицировать пример <a href=\"http://recharts.org/en-US/examples/SimpleLineChart\">http://recharts.org/en-US/examples/SimpleLineChart</a>&nbsp;\n          Чтобы все участки графиков значение y которых не входят в интервал (avg-stddev, avg+stddev) были подкрашены красным цветом.\n          Где avg - среднее значение\n          stddev - среднеквадратичное отклонение.</h3>\n      <ResponsiveContainer width={800} height={500}>\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n\n          <defs>\n            <linearGradient id=\"uvLineColor\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"1\">\n              <stop offset=\"0%\" stopColor=\"red\" />\n              <stop offset={uvBottomBoundPercentage} stopColor=\"red\" />\n              <stop offset={uvBottomBoundPercentage} stopColor=\"green\" />\n              <stop offset={uvTopBoundPercentage} stopColor=\"green\" />\n              <stop offset={uvTopBoundPercentage} stopColor=\"red\" />\n              <stop offset=\"100%\" stopColor=\"red\" />\n            </linearGradient>\n          </defs>\n\n          <defs>\n            <linearGradient id=\"pvLineColor\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"1\">\n              <stop offset=\"0%\" stopColor=\"red\" />\n              <stop offset={pvBottomBoundPercentage} stopColor=\"red\" />\n              <stop offset={pvBottomBoundPercentage} stopColor=\"blue\" />\n              <stop offset={pvTopBoundPercentage} stopColor=\"blue\" />\n              <stop offset={pvTopBoundPercentage} stopColor=\"red\" />\n              <stop offset=\"100%\" stopColor=\"red\" />\n            </linearGradient>\n          </defs>\n\n          <Line type=\"monotone\" dataKey=\"pv\" stroke=\"url(#pvLineColor)\" activeDot={{ r: 8 }} />\n          <Line type=\"monotone\" dataKey=\"uv\" stroke='url(#uvLineColor)' />\n          <Line type=\"monotone\" dataKey=\"uvTopBound\" stroke='green' strokeDasharray=\"3 3\" dot={false} />\n          <Line type=\"monotone\" dataKey=\"uvBottomBound\" stroke='green' strokeDasharray=\"3 3\" dot={false} />\n          <Line type=\"monotone\" dataKey=\"pvTopBound\" stroke='blue' strokeDasharray=\"3 3\" dot={false} />\n          <Line type=\"monotone\" dataKey=\"pvBottomBound\" stroke='blue' strokeDasharray=\"3 3\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n      \n      </ >\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}